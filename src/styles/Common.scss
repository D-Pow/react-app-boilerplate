@use "sass:map";
@use "sass:math";

@use "utils";


@each $color, $rgb in utils.$theme-colors {
    .bg-#{$color} {
        background: $rgb;
    }
}

.text-center {
    text-align: center;
}

.nav-link {
    color: map.get(utils.$theme-colors, "light");
    transition: color 0.5s;
}

.nav-link:hover {
    color: map.get(utils.$theme-colors, "danger");
}

.nav-link.active {
    color: map.get(utils.$theme-colors, "info");
}

@for $pix from 0 through 100 {
    .top-#{$pix} {
        top: $pix + 0%;
    }
}

.width-fit {
    width: fit-content;
}

@for $int from 0 through 200 {
    .w-#{$int} {
        width: $int + 0%;
    }
    .w-#{$int}px {
        width: $int + 0px;
    }
    .w-#{$int}vw {
        width: $int + 0vw;
    }

    .h-#{$int} {
        height: $int + 0%;
    }
    .h-#{$int}px {
        height: $int + 0px;
    }
    .h-#{$int}vh {
        height: $int + 0vh;
    }
}

@for $int from 0 to 100 {
    /**
     * Note: Regarding the following properties, the CSS fields below have corresponding effects:
     *
     *                      Collapse Events TabOrder
     * opacity: 0              No     Yes     Yes
     * visibility: hidden      No     No      No
     * visibility: collapse   Yes+    No      No
     * display: none          Yes     No      No
     *
     * Where:
     * - `Collapse` = Collapses the space that the element would normally occupy (i.e. not painted but exists in the layout/element flow).
     * - `Events` = Responds to events (e.g., click, keypress).
     * - `TabOrder` = Participates in the taborder.
     * - `+` = Yes inside a table element, otherwise No.
     */
    .opacity-#{$int} {
        opacity: math.div($int, 100);
    }
}

.overflow-hidden {
    overflow: hidden;
}

.full-screen {
    height: 100vh !important;
    width: 100vw !important;
}

.full-width-minus-scrollbar {
    // 100vw includes Y-scrollbar area, 100% does not
    width: calc(100vw - (100vw - 100%)) !important;
}

.full-screen-minus-scrollbar {
    @extend .full-screen;
    @extend .full-width-minus-scrollbar;
}

.m-auto {
    margin: auto;
}

.margin-clear {
    margin: 0;
}

$margin-units: (
    '': '%',
    'px': 'px',
    'e': 'em'
);
@for $int from 0 through 100 {
    @each $unit-name, $unit in $margin-units {
        $cls-name: $int + $unit-name;
        $margin-amount: $int + unquote($unit); // unquote() makes it literal CSS

        .mt-#{$cls-name} {
            margin-top: $margin-amount;
        }
        .mb-#{$cls-name} {
            margin-bottom: $margin-amount;
        }
        .ml-#{$cls-name} {
            margin-left: $margin-amount;
        }
        .mr-#{$cls-name} {
            margin-right: $margin-amount;
        }

        /*
         * Note: Using @extend creates fewer classes in the final CSS output.
         * e.g.
         *
         * Without @extend, you get 6 total class declarations:
         * .mt-name {}
         * .mb-name {}
         * .ml-name {}
         * .mr-name {}
         * .mx-name {}
         * .my-name {}
         *
         * With @extend, you get 4 total class declarations,
         * just with .m[yx] attached to .m[tblr]:
         * .mt-name, .my-name {}
         * .mb-name, .my-name {}
         * .ml-name, .mx-name {}
         * .mr-name, .mx-name {}
         */
        .mx-#{$cls-name} {
            @extend .ml-#{$cls-name};
            @extend .mr-#{$cls-name};
        }
        .my-#{$cls-name} {
            @extend .mt-#{$cls-name};
            @extend .mb-#{$cls-name};
        }
    }
}

.absolute-center {
    display: flex;
    justify-content: center;
    align-items: center;
    position: absolute;
    margin: auto;
    height: fit-content;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
}

.flex-center {
    display: flex;
    justify-content: center;
    align-items: center;
    align-content: center;
    margin: auto;
}

.img-fluid {
    max-width: 100%;
    height: auto;
}

.align-content-evenly {
    align-content: space-evenly !important;
}

.underline {
    text-decoration: underline;

    &-extra-space {
        // `@extend` is needed when `&` is used to define a selector name.
        // However, using `& <selector>` or `<selector> &` doesn't since that nested style requires both selectors.
        @extend .underline;
        text-underline-position: under;
    }
}

.segment-bar {
    background: utils.$primary;
    height: 5px;
}

.border.border-medium {
    border-width: 0.2rem !important;

    @each $colorName, $color in utils.$theme-colors {
        @for $opacity from 0 through 9 {
            $opacityVal: math.div($opacity, 10);
            &.border-#{$colorName}-opacity-#{$opacity} {
                border-color: rgba($color, $opacityVal) !important;
            }
        }
    }
}

input.text-white::placeholder, textarea.text-white::placeholder {
    color: white;
}

.box-shadow-sm {
    box-shadow: 0 0 0.5em 0.5em rgba(0, 0, 0, 0.15) !important;
    border-radius: 0.25em !important;
    z-index: 100;
}


:export {
    themeColors: utils.json-stringify(utils.$theme-colors);
    gridBreakpoints: utils.json-stringify(utils.$grid-breakpoints);
}
